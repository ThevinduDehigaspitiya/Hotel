/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.MySQL;


/**
 *
 * @author User
 */
public class CustomerReport extends javax.swing.JFrame {

    /**
     * Creates new form CustomerReport
     */
    public String t;

    public CustomerReport() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Customer Report");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)), "Customer Report", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Yu Gothic UI", 1, 28), new java.awt.Color(0, 102, 255))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(204, 204, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April ", "May", "June ", "July", "August", "September", "October", "November ", "December " }));
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 182, 32));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setText("Select Month");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 148, 32));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(204, 0, 51));
        jButton1.setText("Get Values");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 251, 50));

        jButton10.setBackground(new java.awt.Color(153, 255, 153));
        jButton10.setFont(new java.awt.Font("Goudy Old Style", 1, 30)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 17, 17));
        jButton10.setText("Print");
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 510, 166, 42));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/all pages background.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 390, 210));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/20220731_150355.gif"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 90, -1, 200));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Contact No", "City", "Booking ID", "Arrival Date", "Departure Date", "Payment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 890, 190));

        jButton11.setBackground(new java.awt.Color(153, 255, 153));
        jButton11.setFont(new java.awt.Font("Goudy Old Style", 1, 30)); // NOI18N
        jButton11.setForeground(new java.awt.Color(255, 17, 17));
        jButton11.setText("Dashboard ");
        jButton11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(726, 30, 200, 42));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 951, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            String id1 = jTable1.getValueAt(i, 0).toString();
            String fname = jTable1.getValueAt(i, 1).toString();
            String lname = jTable1.getValueAt(i, 2).toString();
            String contactno = jTable1.getValueAt(i, 3).toString();
            String city = jTable1.getValueAt(i, 4).toString();
            String bookingid = jTable1.getValueAt(i, 5).toString();
            String ad = jTable1.getValueAt(i, 6).toString();
            String dd = jTable1.getValueAt(i, 7).toString();
            String payment = jTable1.getValueAt(i, 8).toString();

            String id = jTable1.getColumnName(0);
            String fn = jTable1.getColumnName(1);
            String ln = jTable1.getColumnName(2);
            String cn = jTable1.getColumnName(3);
            String ci = jTable1.getColumnName(4);
            String bid = jTable1.getColumnName(5);
            String ar = jTable1.getColumnName(6);
            String dep = jTable1.getColumnName(7);
            String pay = jTable1.getColumnName(8);
            try {

                ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");
                rs1.next();

                String total = rs1.getString("SUM(`total`)");

                String total1;

                //print
                double TOT = 0;

                String FULLTOTAL = String.valueOf(TOT);
                Date d1 = new Date();
                Date d2 = new Date();
                SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy");
                SimpleDateFormat sdf3 = new SimpleDateFormat("hh:mm:ss a");

                HashMap parameters2 = new HashMap();
                parameters2.put("Parameter1", id);
                parameters2.put("Parameter2", fn);
                parameters2.put("Parameter3", ln);
                parameters2.put("Parameter4", cn);
                parameters2.put("Parameter5", ci);
                parameters2.put("Parameter6", bid);
                parameters2.put("Parameter7", ar);
                parameters2.put("Parameter8", dep);
                parameters2.put("Parameter9", pay);
                parameters2.put("Parameter10", total);
//            parameters2.put("Parameter3", FULLTOTAL);

                
            } catch (Exception e) {
            }

        }

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String month = jComboBox1.getSelectedItem().toString();

        if (month.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter First Name", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            if (month.equals("January")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE `booking`.`arrival_date` BETWEEN '2022-01-01' AND '2022-02-01';");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("February")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE `booking`.`arrival_date` BETWEEN '2022-02-01' AND '2022-03-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill` INNER JOIN booking WHERE `booking`.`arrival_date` BETWEEN '2022-02-01' AND '2022-03-01';");
                    rs1.next();

                    t = rs1.getString("SUM(`total`)");
                    System.out.println(t);

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("March")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-03-01' AND '2022-04-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("April")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-04-01' AND '2022-05-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("May")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-05-01' AND '2022-06-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("June")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-06-01' AND '2022-07-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("July")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-07-01' AND '2022-08-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("August")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-08-01' AND '2022-09-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill` INNER JOIN booking WHERE `booking`.`arrival_date` BETWEEN '2022-08-01' AND '2022-09-01';");
                    rs1.next();
                    
                    t = rs1.getString("SUM(`total`)");
                    System.out.println(t);

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("September")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-09-01' AND '2022-10-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("October")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-10-01' AND '2022-11-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("November")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-11-01' AND '2022-12-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (month.equals("December")) {
                try {
                    ResultSet rs = MySQL.search("SELECT * FROM `guest` INNER JOIN `booking` ON `guest`.`booking_id`= `booking`.`id`  INNER JOIN `city` ON `guest`.`city_id`=`city`.id INNER JOIN `bill` ON `bill`.`booking_id`=`booking`.id WHERE booking.arrival_date BETWEEN '2022-12-01' AND '2023-01-01';");

                    ResultSet rs1 = MySQL.search("SELECT SUM(`total`) FROM `bill`;");

                    DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                    dtm.setRowCount(0);

                    while (rs.next()) {
                        Vector v = new Vector();
                        v.add(rs.getString("id"));
                        v.add(rs.getString("first_name"));
                        v.add(rs.getString("last_name"));
                        v.add(rs.getString("contact_no"));
                        v.add(rs.getString("city.city"));
                        v.add(rs.getString("booking_id"));
                        v.add(rs.getString("arrival_date"));
                        v.add(rs.getString("departure_date"));
                        v.add(rs.getString("bill.total"));
                        dtm.addRow(v);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        DashBoard j = new DashBoard();
        j.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
